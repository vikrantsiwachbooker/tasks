{"version":3,"sources":["dummy/tests/app.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/mirage/config.jshint.js","dummy/tests/mirage/scenarios/default.jshint.js","dummy/tests/router.jshint.js","dummy/tests/routes/fb-login.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/services/fb-test.js","dummy/tests/unit/services/fb-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, _emberResolver, _dummyConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/mirage/config.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage');\n  QUnit.test('mirage/config.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/config.js should pass jshint.');\n  });\n});","define('dummy/tests/mirage/scenarios/default.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mirage/scenarios');\n  QUnit.test('mirage/scenarios/default.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mirage/scenarios/default.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/fb-login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/fb-login.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/fb-login.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/fb-test', ['exports', 'ember-qunit', 'ember-getowner-polyfill', 'ember'], function (exports, _emberQunit, _emberGetownerPolyfill, _ember) {\n\n  (0, _emberQunit.moduleFor)('service:fb', 'Unit | Service | fb', {\n    beforeEach: function beforeEach() {\n      var owner = (0, _emberGetownerPolyfill['default'])(this.subject());\n      window.FB = undefined;\n      owner.register('config:environment', _ember['default'].Object.create({\n        FB: {\n          appId: 'YOUR-APP-ID',\n          version: 'v2.5'\n        }\n      }));\n\n      this.subject().setAccessToken('YOUR-FB-TOKEN');\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n  (0, _emberQunit.test)('FBInit define FB on window', function (assert) {\n    assert.expect(1);\n\n    return this.subject().FBInit({\n      appId: 'YOUR-APP-ID',\n      version: 'v2.5'\n    }).then(function () {\n      assert.ok(window.FB);\n    });\n  });\n\n  (0, _emberQunit.test)('FBInit loads localized version', function (assert) {\n    assert.expect(1);\n\n    return this.subject().FBInit({\n      appId: 'YOUR-APP-ID',\n      version: 'v2.5',\n      locale: 'es_ES'\n    }).then(function () {\n      assert.expect(this.subject().locale === 'es_ES');\n      assert.ok(window.FB);\n    });\n  });\n\n  (0, _emberQunit.test)('fails with no app ID', function (assert) {\n    assert.expect(1);\n\n    var owner = (0, _emberGetownerPolyfill['default'])(this.subject());\n    owner.register('config:environment', _ember['default'].Object.create());\n    return this.subject().FBInit()['catch'](function (reason) {\n      assert.ok(reason);\n    });\n  });\n\n  (0, _emberQunit.test)('init get skipped', function (assert) {\n    assert.expect(2);\n    var subject = this.subject();\n    var owner = (0, _emberGetownerPolyfill['default'])(subject);\n    owner.register('config:environment', _ember['default'].Object.create({\n      FB: {\n        skipInit: true\n      }\n    }));\n\n    subject.FBInit().then(function (response) {\n      assert.ok(response);\n      assert.equal(response, 'skip init');\n    });\n  });\n\n  (0, _emberQunit.test)('get user data', function (assert) {\n    assert.expect(1);\n\n    return this.subject().api('/me').then(function (response) {\n      assert.ok(response);\n    });\n  });\n\n  (0, _emberQunit.test)('fail to fetch user data with a bad token', function (assert) {\n    this.subject().setAccessToken('foo');\n    assert.expect(1);\n\n    return this.subject().api('/me').then(function () {\n      assert.ok(false, \"promise should not be fulfilled\");\n    })['catch'](function (reason) {\n      assert.ok(reason);\n    });\n  });\n\n  (0, _emberQunit.test)('getLoginStatus', function (assert) {\n    assert.expect(1);\n    var subject = this.subject();\n    var owner = (0, _emberGetownerPolyfill['default'])(subject);\n    owner.register('config:environment', _ember['default'].Object.create({\n      FB: {\n        skipInit: true\n      }\n    }));\n\n    window.FB = {\n      getLoginStatus: function getLoginStatus(f) {\n        assert.ok('calls FB.getLoginStatus');\n        f.call(window, 'OK');\n      }\n    };\n\n    return subject.getLoginStatus();\n  });\n\n  (0, _emberQunit.test)('login', function (assert) {\n    assert.expect(1);\n    var subject = this.subject();\n    var owner = (0, _emberGetownerPolyfill['default'])(subject);\n    owner.register('config:environment', _ember['default'].Object.create({\n      FB: {\n        skipInit: true\n      }\n    }));\n\n    window.FB = {\n      login: function login(f) {\n        assert.ok('calls FB.login');\n        f.call(window, {\n          authResponse: {\n            accessToken: 'foo'\n          }\n        });\n      }\n    };\n\n    return subject.login();\n  });\n\n  (0, _emberQunit.test)('login when it fails', function (assert) {\n    assert.expect(2);\n    var subject = this.subject();\n    var owner = (0, _emberGetownerPolyfill['default'])(subject);\n    owner.register('config:environment', _ember['default'].Object.create({\n      FB: {\n        skipInit: true\n      }\n    }));\n\n    window.FB = {\n      login: function login(f) {\n        assert.ok('calls FB.login');\n        f.call(window, 'foo');\n      }\n    };\n\n    return subject.login()['catch'](function () {\n      assert.ok('rejects');\n    });\n  });\n\n  (0, _emberQunit.test)('logout', function (assert) {\n    assert.expect(1);\n    var subject = this.subject();\n    var owner = (0, _emberGetownerPolyfill['default'])(subject);\n    owner.register('config:environment', _ember['default'].Object.create({\n      FB: {\n        skipInit: true\n      }\n    }));\n\n    window.FB = {\n      logout: function logout(f) {\n        assert.ok('calls FB.logout');\n        f.call(window, 'OK');\n      }\n    };\n\n    return subject.logout();\n  });\n\n  (0, _emberQunit.test)('getAuthResponse', function (assert) {\n    assert.expect(1);\n    var subject = this.subject();\n    var owner = (0, _emberGetownerPolyfill['default'])(subject);\n    owner.register('config:environment', _ember['default'].Object.create({\n      FB: {\n        skipInit: true\n      }\n    }));\n\n    window.FB = {\n      getAuthResponse: function getAuthResponse() {\n        assert.ok('calls FB.getAuthResponse');\n      }\n    };\n\n    subject.getAuthResponse();\n  });\n});","define('dummy/tests/unit/services/fb-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/fb-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/fb-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}